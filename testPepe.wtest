import pepe.*

describe "Sueldo Pepe" {
	
	test "pepe recibe sueldo neto de gerente" {
		pepe.categoria(categoriaGerente)

		assert.equals(categoriaGerente, pepe.categoriaActual())
		assert.equals(15000, pepe.sueldoNeto())
	}

	test "pepe recibe sueldo de cadete"	{
		pepe.categoria(categoriaCadete)

		assert.equals(20000, pepe.sueldoNeto())
	}

	test "pepe recibe bono resultado por porcentaje" {
		pepe.bonoResultado(bonoResultadoPorcentaje)

		pepe.categoria(categoriaCadete)
		assert.equals(2000,pepe.bonoResultadoRecibido())

		pepe.categoria(categoriaGerente)
		assert.equals(1500,pepe.bonoResultadoRecibido())
	}

	test "pepe recibe bono resultado por monto fijo" {
		pepe.bonoResultado(bonoResultadoMontoFijo)

		assert.equals(800,pepe.bonoResultadoRecibido())
	}

	test "pepe recibe bono resultado nulo" {
		pepe.bonoResultado(bonoNulo)

		assert.equals(0,pepe.bonoResultadoRecibido())
	}

	test "pepe recibe bono presentismo normal" {
		pepe.bonoPresentismo(bonoPresentismoNormal)

		pepe.faltas(0)
		assert.equals(2000, pepe.bonoPresentismoRecibido())

		pepe.faltas(1)
		assert.equals(1000, pepe.bonoPresentismoRecibido())

		pepe.faltas(3)
		assert.equals(0, pepe.bonoPresentismoRecibido())

		pepe.faltas(1000)
		assert.equals(0, pepe.bonoPresentismoRecibido())

		pepe.faltas(-1)
		assert.equals(0, pepe.bonoPresentismoRecibido())
	}

	test "pepe recibe bono presentismo ajuste" {
		pepe.bonoPresentismo(bonoPresentismoAjuste)

		pepe.faltas(0)
		assert.equals(100, pepe.bonoPresentismoRecibido())

		pepe.faltas(1)
		assert.equals(0, pepe.bonoPresentismoRecibido())

		pepe.faltas(100)
		assert.equals(0, pepe.bonoPresentismoRecibido())
	}

	test "pepe recibe bono presentismo demagogico" {
		pepe.bonoPresentismo(bonoPresentismoDemagogico)

		pepe.categoria(categoriaGerente)
		assert.equals(500, pepe.bonoPresentismoRecibido())

		pepe.categoria(categoriaCadete)
		assert.equals(300, pepe.bonoPresentismoRecibido())
	}

	test "pepe recibe bono presentismo nulo" {
		pepe.bonoPresentismo(bonoNulo)
		
		assert.equals(0, pepe.bonoPresentismoRecibido())
	}
}

describe "casos de prueba para pepe" {
  test "caso 1" {
	pepe.categoria(categoriaCadete)
	pepe.bonoResultado(bonoResultadoMontoFijo)
	pepe.bonoPresentismo(bonoPresentismoNormal)
	pepe.faltas(3)

	assert.equals(20800, pepe.sueldo())
  }

  test "caso 2" {
	pepe.categoria(categoriaGerente)
	pepe.bonoResultado(bonoResultadoPorcentaje)
	pepe.bonoPresentismo(bonoNulo)
	pepe.faltas(0)

	assert.equals(16500, pepe.sueldo())
  }

  test "caso 3" {
	pepe.categoria(categoriaCadete)
	pepe.bonoResultado(bonoResultadoPorcentaje)
	pepe.bonoPresentismo(bonoPresentismoNormal)
	pepe.faltas(0)

	assert.equals(24000, pepe.sueldo())
  }

  test "caso 4" {
	pepe.categoria(categoriaCadete)
	pepe.bonoResultado(bonoResultadoPorcentaje)
	pepe.bonoPresentismo(bonoPresentismoNormal)
	pepe.faltas(1)

	assert.equals(23000, pepe.sueldo())
  }
}

describe "Sueldo Sofia" {

	test "sofia recibe sueldo de vendedora con o sin muchas ventas" {
		sofia.categoria(categoriaVendedor)

		assert.equals(categoriaVendedor, sofia.categoriaActual())
		assert.equals(20800, sofia.sueldoNeto())

		categoriaVendedor.activarAumentoPorMuchasVentas()
		assert.equals(categoriaVendedor, sofia.categoriaActual())
		assert.equals(26000, sofia.sueldoNeto())
	}

	test "sofia recibe sueldo de cadete con o sin bono" {
		sofia.categoria(categoriaCadete)

		sofia.bonoResultado(bonoResultadoPorcentaje)
		assert.equals(28600, sofia.sueldo())
		
		sofia.bonoResultado(bonoResultadoMontoFijo)
		assert.equals(26800, sofia.sueldo())

		sofia.bonoResultado(bonoNulo)	
		assert.equals(26000, sofia.sueldo())
	}

	test "sofia recibe sueldo de gerente con o sin bono" {
		sofia.categoria(categoriaGerente)

		sofia.bonoResultado(bonoResultadoPorcentaje)
		assert.equals(21450, sofia.sueldo())
		
		sofia.bonoResultado(bonoResultadoMontoFijo)
		assert.equals(20300, sofia.sueldo())

		sofia.bonoResultado(bonoNulo)	
		assert.equals(19500, sofia.sueldo())
	}

	test "sofia recibe sueldo de vendedor con o sin bono sin muchas ventas" {
		sofia.categoria(categoriaVendedor)

		sofia.bonoResultado(bonoResultadoPorcentaje)
		assert.equals(22880, sofia.sueldo())
		
		sofia.bonoResultado(bonoResultadoMontoFijo)
		assert.equals(21600, sofia.sueldo())

		sofia.bonoResultado(bonoNulo)
		assert.equals(20800, sofia.sueldo())
	}

	test "sofia recibe sueldo de vendedor con o sin bono con muchas ventas" {
		categoriaVendedor.activarAumentoPorMuchasVentas()
		sofia.categoria(categoriaVendedor)
		
		sofia.bonoResultado(bonoResultadoPorcentaje)
		assert.equals(28600, sofia.sueldo())
		
		sofia.bonoResultado(bonoResultadoMontoFijo)
		assert.equals(26800, sofia.sueldo())

		sofia.bonoResultado(bonoNulo)
		assert.equals(26000, sofia.sueldo())
	}
}

describe "sueldo neto de los vendedores" {
  	test "los vendedores tienen muchas ventas" {
		categoriaVendedor.activarAumentoPorMuchasVentas()
		assert.that(categoriaVendedor.aumentoPorMuchasVentas())
  	}

	test "los vendedores tienen pocas ventas" {
		assert.notThat(categoriaVendedor.aumentoPorMuchasVentas())
	}
}

describe "sueldo neto de los empleados de medio tiempo" {
	test "los cadetes de medio tiempo reciben su sueldo neto" {
		categoriaMedioTiempo.categoriaBase(categoriaCadete)
		assert.that(categoriaMedioTiempo.sueldoNeto() == 10000)
	}

	test "los gerentes y vendedores de medio tiempo reciben su sueldo neto" {
		categoriaMedioTiempo.categoriaBase(categoriaGerente)
		assert.that(categoriaMedioTiempo.sueldoNeto() == 7500)
	}

	test "los vendedores de medio tiempo reciben su sueldo neto, con o sin aumento por muchas ventas" {
		categoriaMedioTiempo.categoriaBase(categoriaVendedor)
		assert.that(categoriaMedioTiempo.sueldoNeto() == 8000)

		categoriaMedioTiempo.categoriaBase(categoriaVendedor)
		categoriaVendedor.activarAumentoPorMuchasVentas()
		assert.that(categoriaMedioTiempo.sueldoNeto() == 10000)
	}
}

describe "caso de prueba general" {
	test "caso de prueba en pepe" {
		categoriaMedioTiempo.categoriaBase(categoriaCadete)
		pepe.categoria(categoriaMedioTiempo)
		pepe.bonoResultado(bonoResultadoPorcentaje)
		pepe.bonoPresentismo(bonoPresentismoDemagogico)
		pepe.faltas(1)

		assert.equals(11500, pepe.sueldo())
	}

	test "caso de prueba en roque" {
		roque.bonoResultado(bonoResultadoMontoFijo)

		assert.equals(37800, roque.sueldo())
	}

	test "caso de prueba en ernesto" {
		ernesto.compa√±ero(pepe)
		ernesto.bonoPresentismo(bonoPresentismoAjuste)

		assert.equals(20100, ernesto.sueldo())
	}
}